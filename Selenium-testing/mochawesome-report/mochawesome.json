{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2025-03-27T12:39:52.261Z",
    "end": "2025-03-27T12:40:00.233Z",
    "duration": 7972,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fed935af-38be-4a7f-9fd0-e24b09f0afdd",
      "title": "",
      "fullFile": "C:\\Users\\gerha\\WebstormProjects\\Testing\\Selenium-testing\\tests\\chrome\\assertions.js",
      "file": "\\tests\\chrome\\assertions.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fafac801-922b-467b-b43d-9acdd9b4d12c",
          "title": "Asserions test",
          "fullFile": "C:\\Users\\gerha\\WebstormProjects\\Testing\\Selenium-testing\\tests\\chrome\\assertions.js",
          "file": "\\tests\\chrome\\assertions.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Asserions test\"",
              "fullTitle": "Asserions test \"before all\" hook in \"Asserions test\"",
              "timedOut": false,
              "duration": 2876,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let options = new chrome.Options();\noptions.addArguments('--user-data-dir=C:/Users/gerha/AppData/Local/Google/Chrome/User Data');\noptions.addArguments('--profile-directory=Default');\ndriver = await new Builder()\n    .forBrowser('chrome')\n    .setChromeOptions(options)\n    .build();\nshouldBePage = new ShouldBePage(driver);\nshouldHavePage = new ShouldHavePage(driver);\nshouldMatchPage = new ShouldMatchPage(driver);",
              "err": {},
              "uuid": "9b122da5-0b8e-4d5a-9755-69f25d1c6107",
              "parentUUID": "fafac801-922b-467b-b43d-9acdd9b4d12c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Asserions test\"",
              "fullTitle": "Asserions test \"after all\" hook in \"Asserions test\"",
              "timedOut": false,
              "duration": 407,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "df0d0a70-2d92-434f-b682-515dfc162457",
              "parentUUID": "fafac801-922b-467b-b43d-9acdd9b4d12c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should BE assertions",
              "fullTitle": "Asserions test Should BE assertions",
              "timedOut": false,
              "duration": 3050,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('https://practice.expandtesting.com/assertions/should-be');\nconst visibleButton = await shouldBePage.visibleButton.isDisplayed();\nif (!visibleButton) {\n    throw new Error('The visible button is not displayed');\n}\nconst invisibleButton = await shouldBePage.invisibleButton.isDisplayed();\nif (invisibleButton) {\n    throw new Error('The invisible button is visible when it should not be');\n}\nconst isChecked = await shouldBePage.checkedBox.isSelected();\nif (!isChecked) {\n    throw new Error('The checkbox is not checked');\n}\nconst isUnchecked = await shouldBePage.uncheckedBox.isSelected();\nif (isUnchecked) {\n    throw new Error('The checkbox is checked when it should not be');\n}\nconst emptyDivText = await shouldBePage.emptyDiv.getText();\nif (emptyDivText.trim() !== '') {\n    throw new Error('The div is not empty');\n}\nconst notEmptyDivText = await shouldBePage.notEmptyDiv.getText();\nif (notEmptyDivText.trim() === '') {\n    throw new Error('The div is empty when it should not be');\n}\nconst isEnabled = await shouldBePage.enabledButton.isEnabled();\nif (!isEnabled) {\n    throw new Error('The button is not enabled');\n}\nconst isDisabled = await shouldBePage.disabledButton.isEnabled();\nif (isDisabled) {\n    throw new Error('The button is not disabled');\n}",
              "err": {},
              "uuid": "3c0deccb-0376-43e9-8b20-3cdaa560c054",
              "parentUUID": "fafac801-922b-467b-b43d-9acdd9b4d12c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "\"Should HAVE\" assertions",
              "fullTitle": "Asserions test \"Should HAVE\" assertions",
              "timedOut": false,
              "duration": 947,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('https://practice.expandtesting.com/assertions/should-have');\nconst classButton = await shouldHavePage.classButton.getAttribute('class');\nif (!classButton.includes('class1')) {\n    throw new Error('The button does not have the expected class \"class1\"');\n}\nconst textButton = await shouldHavePage.textButton.getText();\nif (textButton !== 'Button 2') {\n    throw new Error('The button text is not \"Button 2\"');\n}\nconst cssColor = await shouldHavePage.cssDiv.getCssValue('color');\nconst backgroundColor = await shouldHavePage.cssDiv.getCssValue('background-color');\nif (cssColor !== 'rgba(0, 0, 0, 1)') {\n    throw new Error('The color of the div is not \"rgba(0, 0, 0, 1)\"');\n}\nif (backgroundColor !== 'rgba(77, 148, 255, 1)') {\n    throw new Error('The background color of the div is not \"rgba(77, 148, 255, 1)\"');\n}\nconst elements = await driver.findElements(By.css('#ul1 li'));\nconst lengthUl = elements.length;\nif (lengthUl !== 3) {\n    throw new Error(`Expected 3 <li> elements, but found ${lengthUl}`);\n}\n\nconst valueInput = await shouldHavePage.valueInput.getAttribute('value');\nif (valueInput !== 'first name') {\n    throw new Error('The input field does not have the expected value \"first name\"');\n}",
              "err": {},
              "uuid": "4899309a-708d-4012-8d2f-1a413dca2a65",
              "parentUUID": "fafac801-922b-467b-b43d-9acdd9b4d12c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "\"Should MATCH\" assertions",
              "fullTitle": "Asserions test \"Should MATCH\" assertions",
              "timedOut": false,
              "duration": 675,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('https://practice.expandtesting.com/assertions/should-match');\nconst matchInputText = await shouldMatchPage.matchInput.getText();\nconst regex = /^[A-Z][a-zA-Z0-9\\s]*\\.\\.\\.$/;\nif (!regex.test(matchInputText)) {\n    throw new Error('The text does not match the expected pattern');\n}",
              "err": {},
              "uuid": "fc588440-1787-4707-85d4-4ce537ca6ffe",
              "parentUUID": "fafac801-922b-467b-b43d-9acdd9b4d12c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3c0deccb-0376-43e9-8b20-3cdaa560c054",
            "4899309a-708d-4012-8d2f-1a413dca2a65",
            "fc588440-1787-4707-85d4-4ce537ca6ffe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4672,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}